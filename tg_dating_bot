from telethon import TelegramClient, events
import asyncio
from telethon.tl.custom import Button
import datetime
from telethon.tl import functions
import asyncio
import pandas as pd
import os
from telethon import TelegramClient, events, Button
from telethon.errors.rpcerrorlist import MessageNotModifiedError
import numpy as np


api_id = '---'
api_hash = '----'
bot_token = '----'
client = TelegramClient('anon', api_id, api_hash).start(bot_token=bot_token)




user_ratings = {}
usernames = {}
thank_you_msgs = {}
welcome_msgs = {}
users_waiting_for_analysis_end = set()
restart_msgs = {}
start_msgs = {}
sent_msgs = {}
already_asked_to_restart = set()
active_quests = {}
analysis_started = False
user_pair_msgs = {}
should_update_message = True
is_analysis_started = False
analysis_message_ids = {}
user_genders = {}
is_updating_thank_you_message={}
previous_matches = set()
analysis_status = {}


previous_match_msg = {}
image_folder = 'C:/pred/5/10/images/'


from telethon import TelegramClient, events
from telethon.tl.custom import Button
import pandas as pd
import numpy as np
import os
import asyncio
import telethon
from telethon import TelegramClient, events, Button
from telethon.errors.rpcerrorlist import MessageNotModifiedError




import random


@client.on(events.NewMessage(incoming=True))
async def react_and_delete(event):
    # Проверяем, что это не команда
    if not event.message.text.startswith('/'):
        # Список возможных эмодзи
        emoji_list = [
            "❤️", "😊", "👍", "😂", "🎉", "💕", "😍", "🤔", "🚀", "👏",
            "🙏", "🎊", "👀", "😁", "🌟", "💖", "🌈", "💯", "🔥", "😃",
            "😄", "😅", "😆", "😉", "😋", "😎", "😜", "😝", "😞", "😟",
            "😠", "😢", "😣", "😤", "😥", "😦", "😧", "😨", "😩", "😪",
            "😫", "😬", "😭", "😮", "😯", "😰", "😱", "😲", "😳", "😴",
            "😵", "😶", "😸", "😹", "😺", "😻", "😼", "😽", "😾", "😿",
            "🙀", "🙁", "🙂", "🙃", "🙄", "🙅", "🙆", "🙇", "🙈", "🙉",
            "🙊", "🙋", "🙌", "🙍", "🙎", "🙏", "🚀", "🚁", "🚂", "🚃",
            "🚄", "🚅", "🚆", "🚇", "🚈", "🚉", "🚊", "🚋", "🚌", "🚍",
            "🚎", "🚏", "🚐", "🚑", "🚒", "🚓", "🚔", "🚕", "🚖", "🚗",
            "🚘", "🚙", "🚚", "🚛", "🚜", "🚝", "🚞", "🚟", "🚠", "🚡",
            "🚢", "🚣", "🚤", "🚥", "🚦", "🚧", "🚨", "🚩", "🚪", "🚫",
            "🚬", "🚭", "🚮", "🚯", "🚰", "🚱", "🚲", "🚳", "🚴", "🚵",
            "🚶", "🚷", "🚸", "🚹", "🚺", "🚻", "🚼", "🚽", "🚾", "🚿",
            "🛀", "🛁", "🛂", "🛃", "🛄", "🛅", "🛋", "🛌", "🛍", "🛎",
            "🛏", "🛐", "🛑", "🛒", "🛕", "🛖", "🛗", "🛘", "🛙", "🛚"
        ]
       
        # Выбираем случайный эмодзи из списка
        random_emoji = random.choice(emoji_list)
       
        # Отправляем случайный эмодзи в ответ на сообщение
        emoji_msg = await event.respond(random_emoji)
       
        # Ждем 3 секунды
        await asyncio.sleep(3)
       
        # Удаляем исходное сообщение и эмодзи
        await client.delete_messages(event.chat_id, [event.message.id, emoji_msg.id])








# Функция для отправки изображений
# Функция для отправки изображений








async def send_image(user_id, image_num):
    if image_num == 1 and user_id in start_msgs:
        await client.delete_messages(user_id, start_msgs[user_id])


    image_messages = {
        1: "Первое изображение из трёх.",
        2: "Второе изображение из трёх.",
        3: "Последнее изображение."
    }


    range_buttons = [
        # Первая строка с кнопками
        [Button.inline("1-8", f"range_{image_num}_1_8"),
        Button.inline("9-16", f"range_{image_num}_9_16"),
        Button.inline("17-24", f"range_{image_num}_17_24"),
        Button.inline("25-33", f"range_{image_num}_25_33")],
        # Вторая строка с кнопками
        [Button.inline("34-41", f"range_{image_num}_34_41"),
        Button.inline("42-49", f"range_{image_num}_42_49"),
        Button.inline("50-58", f"range_{image_num}_50_58"),
        Button.inline("59-66", f"range_{image_num}_59_66")],
        # Третья строка с кнопками
        [Button.inline("67-74", f"range_{image_num}_67_74"),
        Button.inline("75-82", f"range_{image_num}_75_82"),
        Button.inline("83-91", f"range_{image_num}_83_91"),
        Button.inline("92-100", f"range_{image_num}_92_100")]
    ]


    sent_msg = await client.send_file(
        user_id, os.path.join(image_folder, f'image{image_num}.jpg'),
        caption=image_messages.get(image_num, ""),
        buttons=range_buttons
    )
    sent_msgs[user_id] = sent_msg.id




@client.on(events.CallbackQuery(pattern='range'))
async def range_handler(event):
    user_id = event.sender_id
    _, image_num, low, high = event.data.decode().split('_')
    image_num, low, high = int(image_num), int(low), int(high)


    half_range = (high - low + 1) // 2
    rating_buttons = [
        [Button.inline(str(i), f'rate_{image_num}_{i}') for i in range(low, low + half_range)],
        [Button.inline(str(i), f'rate_{image_num}_{i}') for i in range(low + half_range, high + 1)]
    ]


    await client.edit_message(
        user_id, event.message_id,
        buttons=rating_buttons
    )








async def update_files():
    # Отфильтровываем пользователей, у которых есть все три оценки
    full_ratings = {user_id: ratings for user_id, ratings in user_ratings.items() if len(ratings) == 3}
    if not full_ratings:
        return
   
    # Создаем DataFrame с оценками
    df = pd.DataFrame.from_dict(full_ratings, orient='index', columns=['Image 1', 'Image 2', 'Image 3'])
   
    # Меняем индексы на никнеймы пользователей
    df.index = [get_username(user_id) for user_id in df.index]
   
    # Сохраняем оценки пользователей в файл Excel
    df.to_excel('C:/pred/5/10/images/ratings.xlsx')
   
    # Разделяем пользователей на мужчин и женщин
    men_ids = [user_id for user_id, gender in user_genders.items() if gender == 'male' and user_id in df.index]
    women_ids = [user_id for user_id, gender in user_genders.items() if gender == 'female' and user_id in df.index]


    # Проверяем, что есть хотя бы один мужчина и одна женщина, которые оценили все три изображения
    if not men_ids or not women_ids:
        return
   
    men_ratings = df.loc[men_ids]
    women_ratings = df.loc[women_ids]
   
    # Получаем никнеймы для мужчин и женщин
    men_usernames = [get_username(user_id) for user_id in men_ids]
    women_usernames = [get_username(user_id) for user_id in women_ids]
   
    # Вычисляем абсолютные различия между оценками всех мужчин и всех женщин для каждой пары
    absolute_differences = np.abs(men_ratings.values[:, None, :] - women_ratings.values[np.newaxis, :, :])
   
    # Вычисляем среднее абсолютных разностей для каждой пары
    compatibility_scores = np.mean(absolute_differences, axis=2)
   
    # Создаем DataFrame с различиями, используя никнеймы
    compatibility_scores_df = pd.DataFrame(compatibility_scores, index=men_usernames, columns=women_usernames)
   
    # Сохраняем DataFrame с оценками совместимости в файл Excel
    compatibility_scores_df.to_excel('C:/pred/5/10/images/compatibility_scores.xlsx')














ALLOW_REPEATS = 0  # Админская настройка: 1 - разрешить повторы, 0 - запретить повторы


def get_username(user_id):
    return usernames.get(user_id, f"Неизвестный пользователь: {user_id}")










async def analysis():
    global should_update_message
    global remaining_analysis_seconds
    should_update_message = True




    for user_id in active_quests.keys():
        if is_updating_thank_you_message.get(user_id, False):
            continue  # Пропускаем, если сообщение обновляется в rate_handler


        message_text = f"Идет анализ, завершение через {remaining_analysis_seconds} секунд."
       
        # Обновляем сообщение в зависимости от состояния пользователя
        if user_id in thank_you_msgs:
            try:
                await client.edit_message(user_id, thank_you_msgs[user_id][0], message_text)
            except Exception as e:
                print(f"Ошибка при редактировании сообщения о завершении квеста для пользователя {user_id}: {e}")
        elif user_id in welcome_msgs:
            try:
                await client.edit_message(user_id, welcome_msgs[user_id], message_text)
            except Exception as e:
                print(f"Ошибка при редактировании приветственного сообщения для пользователя {user_id}: {e}")
        elif user_id in restart_msgs:
            try:
                await client.edit_message(user_id, restart_msgs[user_id], message_text)
            except Exception as e:
                print(f"Ошибка при редактировании сообщения перезапуска квеста для пользователя {user_id}: {e}")


    # Цикл обновления сообщений
    while remaining_analysis_seconds > 0:
        for user_id in active_quests.keys():
            if is_updating_thank_you_message.get(user_id, False):
                continue  # Пропускаем, если сообщение обновляется в rate_handler


            message_text = f"Идет анализ, завершение через {remaining_analysis_seconds} секунд."
           
            # Выбор правильного сообщения для обновления
            if user_id in thank_you_msgs:
                message_id = thank_you_msgs[user_id][0]
            elif user_id in welcome_msgs:
                message_id = welcome_msgs[user_id]
            elif user_id in restart_msgs:
                message_id = restart_msgs[user_id]
            else:
                continue  # Пропускаем, если нет соответствующего сообщения


            # Попытка обновить сообщение
            try:
                await client.edit_message(user_id, message_id, message_text)
            except Exception as e:
                print(f"Ошибка при обновлении сообщения анализа для пользователя {user_id}: {e}")


        await asyncio.sleep(5)  # Пауза перед следующим обновлением
        remaining_analysis_seconds -= 5
        if remaining_analysis_seconds <= 0:
            break  # Останавливаем обновление, если время анализа истекло






    active_ratings = {user_id: ratings for user_id, ratings in user_ratings.items() if user_id in active_quests and len(ratings) == 3}
    df = pd.DataFrame.from_dict(active_ratings, orient='index', columns=['Image 1', 'Image 2', 'Image 3'])


    # Получаем список пользователей, которые есть и в user_genders, и в df
    valid_male_user_ids = [user_id for user_id, gender in user_genders.items() if gender == 'male' and user_id in df.index]
    valid_female_user_ids = [user_id for user_id, gender in user_genders.items() if gender == 'female' and user_id in df.index]


    men_ratings = df.loc[valid_male_user_ids]
    women_ratings = df.loc[valid_female_user_ids]
   
    # Создаем массив из трехмерных разностей для каждой пары оценок
    absolute_differences = np.abs(men_ratings.values[:, None, :] - women_ratings.values[np.newaxis, :, :])
    # Вычисляем среднее абсолютных разностей для каждой пары
    compatibility_scores = np.mean(absolute_differences, axis=2)


   
    should_update_message = False
    return df, compatibility_scores, absolute_differences, women_ratings, men_ratings, active_ratings


async def find_best_matches(df, compatibility_scores, absolute_differences, women_ratings, men_ratings, active_ratings):
    print("Starting find_best_matches...")


   
    if len(df) < 2:
        print("Not enough users with full ratings.")
        for user_id in active_quests.keys():
            if len(user_ratings.get(user_id, {})) == 3:
                # Для пользователей, которые полностью прошли квест, но не нашли совпадение
                previous_match_msg[user_id] = await client.send_message(int(user_id), "К сожалению, совместимый пользователь не найден.")
            else:
                # Для пользователей, которые не завершили квест
                await start_new_quest(user_id)
            await ask_for_restart(user_id)
        return
   


   
    notified_users = set()
    users_for_new_quest_invitation = set()
    while len(notified_users) < len(df) and len(notified_users) < len(df) - 1:
        if np.any(np.isfinite(compatibility_scores)):
            print("Searching for best match...")
            min_diff_indices = np.unravel_index(np.argmin(compatibility_scores, axis=None), compatibility_scores.shape)
            closest_users = int(men_ratings.index[min_diff_indices[0]]), int(women_ratings.index[min_diff_indices[1]])
            print(f"Closest users: {closest_users}")


            valid_match = ALLOW_REPEATS or (frozenset(closest_users) not in previous_matches and closest_users[0] not in notified_users and closest_users[1] not in notified_users)
           
            if valid_match:
                print("Valid match found, sending messages...")
               
                # Удаляем предыдущее сообщение, если оно существует
                if closest_users[0] in previous_match_msg:
                    try:
                        await client.delete_messages(closest_users[0], previous_match_msg[closest_users[0]])
                    except telethon.errors.rpcerrorlist.MessageIdInvalidError:
                        pass
                    except telethon.errors.rpcerrorlist.MessageDeleteForbiddenError:
                        pass                        
                    del previous_match_msg[closest_users[0]]
                if closest_users[1] in previous_match_msg:
                    try:
                        await client.delete_messages(closest_users[1], previous_match_msg[closest_users[1]])
                    except telethon.errors.rpcerrorlist.MessageIdInvalidError:
                        pass
                    except telethon.errors.rpcerrorlist.MessageDeleteForbiddenError:
                        pass


                    del previous_match_msg[closest_users[1]]




                min_diff_indices = np.unravel_index(np.argmin(compatibility_scores, axis=None), compatibility_scores.shape)
                closest_users = (int(men_ratings.index[min_diff_indices[0]]), int(women_ratings.index[min_diff_indices[1]]))
                closest_score = compatibility_scores[min_diff_indices]
                # Отправляем новое сообщение и добавляем его в словарь user_pair_msgs
               
                if remaining_analysis_seconds == 0:
                    new_msg_for_user_0 = await client.send_message(
                        closest_users[0],
                        f"Поздравляем! Для вас подобран самый совместимый собеседник: @{get_username(closest_users[1])}. Совместимость: {closest_score:.2f}"
                    )


                    new_msg_for_user_1 = await client.send_message(
                        closest_users[1],
                        f"Поздравляем! Для вас подобран самый совместимый собеседник: @{get_username(closest_users[0])}. Совместимость: {closest_score:.2f}"
                    )
                # Добавляем ID сообщений в список для каждого пользователя
                user_pair_msgs.setdefault(closest_users[0], []).append(new_msg_for_user_0.id)
                user_pair_msgs.setdefault(closest_users[1], []).append(new_msg_for_user_1.id)


                # Если у пользователя более 4 сообщений, удаляем самое первое
                if len(user_pair_msgs[closest_users[0]]) > 3:
                    await client.delete_messages(closest_users[0], user_pair_msgs[closest_users[0]].pop(0))
                if len(user_pair_msgs[closest_users[1]]) > 3:
                    await client.delete_messages(closest_users[1], user_pair_msgs[closest_users[1]].pop(0))


                notified_users.update(closest_users)
                previous_matches.add(frozenset(closest_users))
                await ask_for_restart(closest_users[0])
                await ask_for_restart(closest_users[1])
                if closest_users[0] in thank_you_msgs:
                    await client.delete_messages(closest_users[0], thank_you_msgs[closest_users[0]][0])
                    del thank_you_msgs[closest_users[0]]
                if closest_users[1] in thank_you_msgs:
                    await client.delete_messages(closest_users[1], thank_you_msgs[closest_users[1]][0])


                    del thank_you_msgs[closest_users[1]]
            else:
                print("Match is not valid, continuing search...")
                compatibility_scores[min_diff_indices[0], min_diff_indices[1]] = np.inf
                if closest_users[0] in thank_you_msgs:
                    await client.delete_messages(closest_users[0], thank_you_msgs[closest_users[0]][0])
                   
                    del thank_you_msgs[closest_users[0]]
                if closest_users[1] in thank_you_msgs:
                    await client.delete_messages(closest_users[1], thank_you_msgs[closest_users[1]][0])


                    del thank_you_msgs[closest_users[1]]


        else:
            print("No more possible matches.")
            break
   
    print("No matches found for some users, sending messages...")


    for user_id in active_quests.keys():
        if user_id not in notified_users:
            if len(user_ratings.get(user_id, {})) < 3:
                # Пользователь начал, но не завершил квест
                await start_new_quest(user_id)
            else:
                # Пользователь завершил квест, но совместимый собеседник не найден
                if remaining_analysis_seconds == 0:
                    previous_match_msg[user_id] = await client.send_message(user_id, "К сожалению, на данный момент мы не смогли подобрать для вас идеального собеседника.")
            await ask_for_restart(user_id)
        if user_id in thank_you_msgs:
            await client.delete_messages(user_id, thank_you_msgs[user_id])
            del thank_you_msgs[user_id]
    print("find_best_matches completed.")
    users_for_new_quest_invitation = set(active_quests.keys()) - notified_users
    return users_for_new_quest_invitation


# Добавьте эту новую функцию:
async def start_new_quest(user_id):
    global is_analysis_started, should_update_message
   
    is_analysis_started = False
    should_update_message = True
    # Удаляем предыдущее приветственное сообщение, если оно существует
    if user_id in welcome_msgs:
        try:
            await client.delete_messages(user_id, welcome_msgs[user_id])
        except telethon.errors.rpcerrorlist.MessageIdInvalidError:
            pass
        welcome_msgs.pop(user_id, None)












































               


async def ask_for_restart(user_id):
    if user_id in already_asked_to_restart:
        return
    already_asked_to_restart.add(user_id)
    if user_id in thank_you_msgs:
        try:
            await client.delete_messages(user_id, thank_you_msgs[user_id][0])
        except telethon.errors.rpcerrorlist.MessageIdInvalidError:
            pass
        thank_you_msgs.pop(user_id, None)
    await client.send_message(user_id, "Новый ежедневный квест доступен.", buttons=[Button.inline("Начать квест", 'restart')])


async def send_typing_effect(user_id, message):
    sent_msg = await client.send_message(user_id, message)
    return sent_msg.id








@client.on(events.NewMessage(pattern='/start'))
async def start_handler(event):
    user_id = event.sender_id
    user = await event.get_sender()
    if hasattr(user, 'usernames') and user.usernames:
        usernames[user_id] = user.usernames[0].username  # Сохраняем только никнейм
    else:
        usernames[user_id] = user.username if user.username else user.id  # Сохраняем никнейм или ID
    await event.respond("Выберите, пожалуйста, ваш пол.", buttons=[Button.inline("Женский", 'gender_female'), Button.inline("Мужской", 'gender_male')])






@client.on(events.CallbackQuery(pattern='gender'))
async def gender_handler(event):
    user_id = event.sender_id
    _, gender = event.data.decode().split('_')
    user_genders[user_id] = gender
   
    # Удаляем сообщение о выборе пола
    await client.delete_messages(user_id, event.message_id)


    if remaining_seconds > 0 and remaining_analysis_seconds in [ANALYSIS_DURATION, -1]:
        # Продолжение обычного выполнения
        user_ratings[user_id] = {}
        active_quests[user_id] = True
        welcome_msg_id = await send_typing_effect(user_id, "Оцените своё отношение к следующим трём изображениям по шкале от 1 до 100...")
        welcome_msgs[user_id] = welcome_msg_id
        await send_image(user_id, 1)
    else:
        # Показать сообщение о том, что идет анализ
        sent_message = await client.send_message(user_id, f"Идет анализ, завершение через {remaining_analysis_seconds} секунд.")
        users_waiting_for_analysis_end.add(user_id)
        analysis_message_ids[user_id] = sent_message.id




# ... (предыдущий код)


@client.on(events.CallbackQuery(pattern='rate'))
async def rate_handler(event):
    global remaining_seconds
    user_id = event.sender_id
    _, image_num, rating = event.data.decode().split('_')
    image_num = int(image_num)
    rating = int(rating)


    if user_id not in user_ratings:
        user_ratings[user_id] = {}
   
    if user_id in user_ratings:
        user_ratings[user_id][f'Image {image_num}'] = rating


    await update_files()


    if user_id in sent_msgs:
        await client.delete_messages(user_id, sent_msgs[user_id])




    next_image_num = image_num + 1
    if next_image_num <= 3:
        await send_image(user_id, next_image_num)
    else:
        if user_id in welcome_msgs:
            await asyncio.sleep(1)
            await client.delete_messages(user_id, welcome_msgs[user_id])
            welcome_msgs.pop(user_id, None)
        if user_id in restart_msgs and next_image_num > 3:
            await client.delete_messages(user_id, restart_msgs[user_id])
            del restart_msgs[user_id]
       
        time_str = time_to_string(remaining_seconds, remaining_analysis_seconds)
        thank_you_msg_text = f"Поздравляем с прохождением квеста! Через {time_str} для вас будет подобран самый совместимый собеседник в рамках сегодняшнего ежедневного квеста."
        thank_you_msg_id = await send_typing_effect(user_id, thank_you_msg_text)
        thank_you_msgs[user_id] = (thank_you_msg_id, thank_you_msg_text)


        # Обновляем сообщение в реальном времени
        is_updating_thank_you_message[user_id] = True
        #while remaining_seconds > 0 and should_update_message:
        while remaining_seconds > 0:
            print(f"[Debug] Remaining seconds: {remaining_seconds}, Should update: {should_update_message}")
            await asyncio.sleep(5)  # обновление каждые 5 секунд для уменьшения нагрузки
            new_time_str = time_to_string(remaining_seconds, remaining_analysis_seconds)
            new_msg_text = f"Поздравляем с прохождением квеста! Через {new_time_str} для вас будет подобран самый совместимый собеседник в рамках сегодняшнего ежедневного квеста."
            try:
                if thank_you_msgs.get(user_id):
                    current_msg_text = thank_you_msgs[user_id][1]
                    if current_msg_text != new_msg_text:
                        try:
                            await client.edit_message(user_id, thank_you_msgs[user_id][0], new_msg_text)
                            thank_you_msgs[user_id] = (thank_you_msgs[user_id][0], new_msg_text)
                        except telethon.errors.rpcerrorlist.MessageNotModifiedError:
                            pass
                    else:
                        print(f"Message text did not change for user {user_id}. Current text: '{current_msg_text}', New text: '{new_msg_text}'")
            except telethon.errors.rpcerrorlist.MessageIdInvalidError:
                print(f"Failed to edit message for user {user_id}. Message ID might be invalid.")
                # Обработка ошибки, возможно удаление ID из thank_you_msgs
                del thank_you_msgs[user_id]
        is_updating_thank_you_message[user_id] = False










def time_to_string(remaining_seconds, remaining_analysis_seconds):
    total_seconds = remaining_seconds + remaining_analysis_seconds
    hours, remainder = divmod(total_seconds, 3600)
    minutes, seconds = divmod(remainder, 60)
    if hours > 0:
        return f"{hours} часов {minutes} минут {seconds} секунд"
    elif minutes > 0:
        return f"{minutes} минут {seconds} секунд"
    else:
        return f"{seconds} секунд"
   
def num_to_words(num):
    words = ["один", "два", "три", "четыре", "пять", "шесть", "семь", "восемь", "девять", "десять",
             "одиннадцать", "двенадцать", "тринадцать", "четырнадцать", "пятнадцать", "шестнадцать",
             "семнадцать", "восемнадцать", "девятнадцать", "двадцать"]
    if num <= 20:
        return words[num - 1]
    else:
        return f"{words[19]} {words[num - 21]}"




async def delete_unanswered_images():
    for user_id in active_quests.keys():
        if user_id in sent_msgs:
            await client.delete_messages(user_id, sent_msgs[user_id])






@client.on(events.CallbackQuery(pattern='restart'))
async def restart_handler(event):
    user_id = event.sender_id
    user_ratings[user_id] = {}
    active_quests[user_id] = True






    if remaining_seconds == 0:
        # Если анализ все еще идет, отправляем сообщение об этом
        sent_message = await client.send_message(user_id, f"Идет анализ, завершение через {remaining_analysis_seconds} секунд.")
        users_waiting_for_analysis_end.add(user_id)
        analysis_message_ids[user_id] = sent_message.id
    else:
        # Если анализ завершен, приступаем к новому квесту
        restart_msg = await event.respond("Оцените своё отношение к следующим трём изображениям по шкале от 1 до 100. ВАЖНО: рассмотрите, пожалуйста, не только внешнюю привлекательность данных изображений, но и ваше отношение к происходящей на изображении ситуации.")
        restart_msgs[user_id] = restart_msg.id
        await send_image(user_id, 1)








    await client.delete_messages(user_id, event.message_id)
    if user_id in thank_you_msgs:
        await client.delete_messages(user_id, thank_you_msgs[user_id])
        del thank_you_msgs[user_id]
    if user_id in previous_match_msg:  # Добавлено здесь
        await client.delete_messages(user_id, previous_match_msg[user_id])  # Добавлено здесь
        del previous_match_msg[user_id]  # Добавлено здесь
    if user_id in thank_you_msgs:
        await client.delete_messages(user_id, thank_you_msgs[user_id][0])
        del thank_you_msgs[user_id]
    if user_id in welcome_msgs:
        await client.delete_messages(user_id, welcome_msgs[user_id])
        del welcome_msgs[user_id]


   


@client.on(events.NewMessage(pattern='/next'))
async def next_handler(event):
    global remaining_seconds
    remaining_seconds = QUEST_DURATION  # Сбрасываем таймер до начального значения
    await delete_unanswered_images()  # Удаление неотвеченных изображений


    # Выполнение анализа
    df, compatibility_scores, absolute_differences, women_ratings, men_ratings, active_ratings = await analysis()


    # Вызов find_best_matches с необходимыми параметрами
    users_for_new_quest = await find_best_matches(df, compatibility_scores, absolute_differences, women_ratings, men_ratings, active_ratings)


    # Удаляем сообщения "Начнем квест заново!" для всех пользователей
    for user_id in list(active_quests.keys()):
        if user_id in restart_msgs:
            try:
                await client.delete_messages(user_id, restart_msgs[user_id])
            except telethon.errors.rpcerrorlist.MessageIdInvalidError:
                pass
            restart_msgs.pop(user_id, None)
    active_quests.clear()
    already_asked_to_restart.clear()




QUEST_DURATION = 40
remaining_seconds = QUEST_DURATION


ANALYSIS_DURATION = 20 # Допустим, это будет 20 минут
remaining_analysis_seconds = ANALYSIS_DURATION




async def quest_timer():
    global remaining_seconds, remaining_analysis_seconds, should_update_message
    analysis_done = False  # Флаг для проверки, выполнен ли анализ


    while True:
        await asyncio.sleep(1)  # спать 1 секунду


        if remaining_seconds > 0:
            remaining_seconds -= 1
           
            print(f"Основной таймер: {remaining_seconds} секунд осталось")
           
        elif remaining_seconds == 0 and not analysis_done:
            should_update_message = True
            print("Основной таймер истек. Выполняется анализ...")
            await delete_unanswered_images()
            df, compatibility_scores, absolute_differences, women_ratings, men_ratings, active_ratings = await analysis()
            remaining_seconds = -1  # Устанавливаем флаг, что основной таймер обработан
            analysis_done = True


        if analysis_done and remaining_analysis_seconds > 0:
            print(f"Дополнительный таймер анализа: {remaining_analysis_seconds} секунд осталось")
            remaining_analysis_seconds -= 1
           
        elif remaining_analysis_seconds == 0:
            print("Дополнительный таймер анализа истек. Выполняется поиск лучших совпадений...")
            users_for_new_quest = await find_best_matches(df, compatibility_scores, absolute_differences, women_ratings, men_ratings, active_ratings)
            remaining_analysis_seconds = -1  # Устанавливаем флаг, что дополнительный таймер обработан
            analysis_done = False  # Сбросить флаг анализа для следующего квеста
            if users_for_new_quest is not None:
            # Сообщение о новом квесте отправляется после завершения анализа
                for user_id in set(active_quests.keys()).union(users_for_new_quest):
                    await ask_for_restart(user_id)




        if remaining_seconds == -1 and remaining_analysis_seconds == -1:
            # Удаляем сообщения "Начнем квест заново!" для всех пользователей
            for user_id in list(active_quests.keys()):
                if user_id in restart_msgs:
                    try:
                        await client.delete_messages(user_id, restart_msgs[user_id])
                    except telethon.errors.rpcerrorlist.MessageIdInvalidError:
                        pass
                    restart_msgs.pop(user_id, None)
            for user_id in is_updating_thank_you_message.keys():
                is_updating_thank_you_message[user_id] = False
            active_quests.clear()
           
            print("Квест завершен. Таймеры сброшены.")
            should_update_message = False
            remaining_seconds = QUEST_DURATION  # сбросить время после завершения квеста
            remaining_analysis_seconds = ANALYSIS_DURATION  # сбросить дополнительное время анализа
            thank_you_msgs.clear()  
            welcome_msgs.clear()
            for user_id in active_quests.keys():
                is_updating_thank_you_message[user_id] = False




            for user_id in users_waiting_for_analysis_end:
                try:
                    await client.delete_messages(user_id, analysis_message_ids[user_id])


                except Exception as e:
                    print(f"Ошибка при удалении сообщения анализа для пользователя {user_id}: {e}")
                if user_id not in already_asked_to_restart:
                    await ask_for_restart(user_id)
            users_waiting_for_analysis_end.clear()
            analysis_message_ids.clear()  # Очистка словаря ID сообщений об анализе


            already_asked_to_restart.clear()
   












with client:
    client.loop.create_task(quest_timer())
    client.run_until_disconnected()



